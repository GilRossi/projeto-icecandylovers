  provider "aws" {
    region = var.aws_region
  }
    
    # Data source para encontrar uma VPC existente (se houver)
    data "aws_vpc" "existing_vpc" {
    filter {
    name   = "tag:Name"
    values = ["my-vpc"]
    }
  }
    
    # Cria uma VPC apenas se a VPC existente não for encontrada
    resource "aws_vpc" "my_vpc" {
  count      = length(data.aws_vpc.existing_vpc.id) == 0 ? 1 : 0  # Cria nova VPC se não encontrar uma existente
    cidr_block = "10.0.0.0/16"  # Define o bloco CIDR da VPC
    
    tags = {
    Name = "my-vpc"
  }
  }

    # Usar a VPC existente ou a criada
    locals {
  vpc_id = length(data.aws_vpc.existing_vpc.id) > 0 ? data.aws_vpc.existing_vpc.id : aws_vpc.my_vpc[0].id
  }

    # Data para buscar a AMI do Ubuntu
    data "aws_ami" "ubuntu" {
    most_recent = true
    owners      = ["099720109477"]  # ID do proprietário para imagens oficiais do Ubuntu
    filters = {
    name = "ubuntu-*-amd64-server-*"
  }
  }

    # Buscar sub-rede existente (opcional)
    data "aws_subnet" "existing_subnet" {
    filter {
    name   = "tag:Name"
    values = ["my-subnet"]
  }
  }

    # Criar sub-rede apenas se não existir
    resource "aws_subnet" "my_subnet" {
  count             = length(data.aws_subnet.existing_subnet.id) == 0 ? 1 : 0
    vpc_id            = local.vpc_id
    cidr_block        = "10.0.1.0/24"
    availability_zone = "us-east-1a"
    
    tags = {
    Name        = "my-subnet"
    Environment = "development"
  }
  }

    # Security Group (atualiza se já existir)
    resource "aws_security_group" "java_sg" {
    name_prefix = "java-sg"
    vpc_id      = local.vpc_id
    
    ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

    ingress {
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

    egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

    tags = {
    Name        = "java-sg"
    Environment = "development"
  }
  }

    # Buscar instância EC2 existente
    data "aws_instance" "existing_instance" {
    filter {
    name   = "tag:Name"
    values = ["Java21App"]
  }
  }

    # Criar instância apenas se não existir
    resource "aws_instance" "java_app" {
  count                  = length(data.aws_instance.existing_instance.id) == 0 ? 1 : 0
    ami                    = data.aws_ami.ubuntu.id
    instance_type          = "t2.micro"
    key_name               = aws_key_pair.my_key_pair[count.index].key_name
    subnet_id              = aws_subnet.my_subnet[count.index].id
    vpc_security_group_ids = [aws_security_group.java_sg.id]
    
    tags = {
    Name        = "Java21App"
    Environment = "development"
  }
  }

    # Verifica se a chave SSH já existe
    data "aws_key_pair" "my_key_pair" {
    key_name = "my-key-name"
  }

    # Cria a chave SSH se não existir
    resource "aws_key_pair" "my_key_pair" {
  count    = length(data.aws_key_pair.my_key_pair.id) == 0 ? 1 : 0
    key_name = "my-key-name"
    public_key = file("/home/gil/.ssh/id_rsa.pub")
  }
