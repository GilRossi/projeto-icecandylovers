name: Deploy Java 21 App

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Checkout do código
      - name: Checkout code
        uses: actions/checkout@v2

      # Passo 2: Configurar JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      # Passo 3: Configurar AWS CLI
      - name: Configure AWS Region
        run: aws configure set region us-east-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Passo 4: Build do projeto com Maven
      - name: Build with Maven
        run: mvn clean package

      # Passo 5: Configurar chave SSH privada
      - name: Configure SSH Private Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      # Passo 6: Configurar Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      # Passo 7: Inicializar Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      # Passo 8: Validar configuração do Terraform
      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      # Passo 9: Executar Terraform Plan
      - name: Terraform Plan
        run: terraform plan -var="ssh_private_key=${{ secrets.SSH_PRIVATE_KEY }}"
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Passo 10: Executar Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve -var="ssh_private_key=${{ secrets.SSH_PRIVATE_KEY }}"
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Save Private Key
        run: |
          mkdir -p ~/.ssh
          echo "$(terraform output -raw private_key)" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        working-directory: ./terraform

      # Passo 11: Obter IP da instância EC2
      - name: Get EC2 Instance IP
        id: get-ip
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=java_app" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)
          if [ -z "$INSTANCE_ID" ]; then
            echo "Instance not found"
            exit 1
          fi
          INSTANCE_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Passo 12: Instalar Java 21 na instância EC2
      - name: Install Java 21 on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ env.instance_ip }} << 'EOF'
          sudo apt update
          sudo apt install -y openjdk-21-jdk
          EOF

      # Passo 13: Copiar JAR para a instância EC2
      - name: Copy JAR to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa target/my-java-app.jar ubuntu@${{ env.instance_ip }}:/home/ubuntu/

      # Passo 14: Deploy da aplicação
      - name: Deploy Application
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ env.instance_ip }} << 'EOF'
          sudo systemctl stop my-java-app || true
          sudo mv /home/ubuntu/my-java-app.jar /opt/my-java-app/
          sudo systemctl start my-java-app
          EOF

      # Passo 15: Verificar saúde da aplicação
      - name: Check Application Health
        run: |
          curl -s http://${{ env.instance_ip }}:8080/health
          if [ $? -ne 0 ]; then
            echo "Application health check failed"
            exit 1
          fi